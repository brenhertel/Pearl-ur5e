// Generated by gencpp from file dmp/GetDMPPlanResponse.msg
// DO NOT EDIT!


#ifndef DMP_MESSAGE_GETDMPPLANRESPONSE_H
#define DMP_MESSAGE_GETDMPPLANRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dmp/DMPTraj.h>

namespace dmp
{
template <class ContainerAllocator>
struct GetDMPPlanResponse_
{
  typedef GetDMPPlanResponse_<ContainerAllocator> Type;

  GetDMPPlanResponse_()
    : plan()
    , at_goal(0)  {
    }
  GetDMPPlanResponse_(const ContainerAllocator& _alloc)
    : plan(_alloc)
    , at_goal(0)  {
  (void)_alloc;
    }



   typedef  ::dmp::DMPTraj_<ContainerAllocator>  _plan_type;
  _plan_type plan;

   typedef uint8_t _at_goal_type;
  _at_goal_type at_goal;





  typedef boost::shared_ptr< ::dmp::GetDMPPlanResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmp::GetDMPPlanResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDMPPlanResponse_

typedef ::dmp::GetDMPPlanResponse_<std::allocator<void> > GetDMPPlanResponse;

typedef boost::shared_ptr< ::dmp::GetDMPPlanResponse > GetDMPPlanResponsePtr;
typedef boost::shared_ptr< ::dmp::GetDMPPlanResponse const> GetDMPPlanResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmp::GetDMPPlanResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dmp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dmp': ['/home/bhertel/catkin_ws/src/dmp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GetDMPPlanResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::GetDMPPlanResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GetDMPPlanResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcf9f84a71b2617cf4bbc301a97c05cd";
  }

  static const char* value(const ::dmp::GetDMPPlanResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcf9f84a71b2617cULL;
  static const uint64_t static_value2 = 0xf4bbc301a97c05cdULL;
};

template<class ContainerAllocator>
struct DataType< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmp/GetDMPPlanResponse";
  }

  static const char* value(const ::dmp::GetDMPPlanResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
DMPTraj plan\n\
\n\
\n\
uint8 at_goal\n\
\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: dmp/DMPTraj\n\
# points and times should be the same length\n\
DMPPoint[] points\n\
\n\
# Times of observations, in seconds, starting at zero\n\
float64[] times\n\
\n\
\n\
\n\
================================================================================\n\
MSG: dmp/DMPPoint\n\
# Positions and velocities of DOFs\n\
#Velocity is only used for movement plans, not for giving demonstrations.\n\
float64[] positions\n\
float64[] velocities\n\
\n\
\n\
";
  }

  static const char* value(const ::dmp::GetDMPPlanResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan);
      stream.next(m.at_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDMPPlanResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmp::GetDMPPlanResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmp::GetDMPPlanResponse_<ContainerAllocator>& v)
  {
    s << indent << "plan: ";
    s << std::endl;
    Printer< ::dmp::DMPTraj_<ContainerAllocator> >::stream(s, indent + "  ", v.plan);
    s << indent << "at_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.at_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMP_MESSAGE_GETDMPPLANRESPONSE_H
