// Generated by gencpp from file dmp/SetActiveDMPRequest.msg
// DO NOT EDIT!


#ifndef DMP_MESSAGE_SETACTIVEDMPREQUEST_H
#define DMP_MESSAGE_SETACTIVEDMPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <dmp/DMPData.h>

namespace dmp
{
template <class ContainerAllocator>
struct SetActiveDMPRequest_
{
  typedef SetActiveDMPRequest_<ContainerAllocator> Type;

  SetActiveDMPRequest_()
    : dmp_list()  {
    }
  SetActiveDMPRequest_(const ContainerAllocator& _alloc)
    : dmp_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::dmp::DMPData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::dmp::DMPData_<ContainerAllocator> >::other >  _dmp_list_type;
  _dmp_list_type dmp_list;





  typedef boost::shared_ptr< ::dmp::SetActiveDMPRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmp::SetActiveDMPRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetActiveDMPRequest_

typedef ::dmp::SetActiveDMPRequest_<std::allocator<void> > SetActiveDMPRequest;

typedef boost::shared_ptr< ::dmp::SetActiveDMPRequest > SetActiveDMPRequestPtr;
typedef boost::shared_ptr< ::dmp::SetActiveDMPRequest const> SetActiveDMPRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmp::SetActiveDMPRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dmp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dmp': ['/home/bhertel/catkin_ws/src/dmp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::SetActiveDMPRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::SetActiveDMPRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::SetActiveDMPRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec873fb8fce06b1431bf639280c06e64";
  }

  static const char* value(const ::dmp::SetActiveDMPRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec873fb8fce06b14ULL;
  static const uint64_t static_value2 = 0x31bf639280c06e64ULL;
};

template<class ContainerAllocator>
struct DataType< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmp/SetActiveDMPRequest";
  }

  static const char* value(const ::dmp::SetActiveDMPRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
DMPData[] dmp_list\n\
\n\
\n\
================================================================================\n\
MSG: dmp/DMPData\n\
float64 k_gain\n\
float64 d_gain\n\
float64[] weights\n\
float64[] f_domain\n\
float64[] f_targets\n\
\n\
";
  }

  static const char* value(const ::dmp::SetActiveDMPRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dmp_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetActiveDMPRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmp::SetActiveDMPRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmp::SetActiveDMPRequest_<ContainerAllocator>& v)
  {
    s << indent << "dmp_list[]" << std::endl;
    for (size_t i = 0; i < v.dmp_list.size(); ++i)
    {
      s << indent << "  dmp_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::dmp::DMPData_<ContainerAllocator> >::stream(s, indent + "    ", v.dmp_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMP_MESSAGE_SETACTIVEDMPREQUEST_H
