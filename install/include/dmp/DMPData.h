// Generated by gencpp from file dmp/DMPData.msg
// DO NOT EDIT!


#ifndef DMP_MESSAGE_DMPDATA_H
#define DMP_MESSAGE_DMPDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dmp
{
template <class ContainerAllocator>
struct DMPData_
{
  typedef DMPData_<ContainerAllocator> Type;

  DMPData_()
    : k_gain(0.0)
    , d_gain(0.0)
    , weights()
    , f_domain()
    , f_targets()  {
    }
  DMPData_(const ContainerAllocator& _alloc)
    : k_gain(0.0)
    , d_gain(0.0)
    , weights(_alloc)
    , f_domain(_alloc)
    , f_targets(_alloc)  {
  (void)_alloc;
    }



   typedef double _k_gain_type;
  _k_gain_type k_gain;

   typedef double _d_gain_type;
  _d_gain_type d_gain;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _weights_type;
  _weights_type weights;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _f_domain_type;
  _f_domain_type f_domain;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _f_targets_type;
  _f_targets_type f_targets;





  typedef boost::shared_ptr< ::dmp::DMPData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmp::DMPData_<ContainerAllocator> const> ConstPtr;

}; // struct DMPData_

typedef ::dmp::DMPData_<std::allocator<void> > DMPData;

typedef boost::shared_ptr< ::dmp::DMPData > DMPDataPtr;
typedef boost::shared_ptr< ::dmp::DMPData const> DMPDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmp::DMPData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmp::DMPData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dmp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dmp': ['/home/bhertel/catkin_ws/src/dmp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dmp::DMPData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::DMPData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::DMPData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::DMPData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::DMPData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::DMPData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmp::DMPData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd2a2dd30705ac6b894c0c83b8081221";
  }

  static const char* value(const ::dmp::DMPData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd2a2dd30705ac6bULL;
  static const uint64_t static_value2 = 0x894c0c83b8081221ULL;
};

template<class ContainerAllocator>
struct DataType< ::dmp::DMPData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmp/DMPData";
  }

  static const char* value(const ::dmp::DMPData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmp::DMPData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 k_gain\n\
float64 d_gain\n\
float64[] weights\n\
float64[] f_domain\n\
float64[] f_targets\n\
\n\
";
  }

  static const char* value(const ::dmp::DMPData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmp::DMPData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.k_gain);
      stream.next(m.d_gain);
      stream.next(m.weights);
      stream.next(m.f_domain);
      stream.next(m.f_targets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DMPData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmp::DMPData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmp::DMPData_<ContainerAllocator>& v)
  {
    s << indent << "k_gain: ";
    Printer<double>::stream(s, indent + "  ", v.k_gain);
    s << indent << "d_gain: ";
    Printer<double>::stream(s, indent + "  ", v.d_gain);
    s << indent << "weights[]" << std::endl;
    for (size_t i = 0; i < v.weights.size(); ++i)
    {
      s << indent << "  weights[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.weights[i]);
    }
    s << indent << "f_domain[]" << std::endl;
    for (size_t i = 0; i < v.f_domain.size(); ++i)
    {
      s << indent << "  f_domain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.f_domain[i]);
    }
    s << indent << "f_targets[]" << std::endl;
    for (size_t i = 0; i < v.f_targets.size(); ++i)
    {
      s << indent << "  f_targets[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.f_targets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMP_MESSAGE_DMPDATA_H
