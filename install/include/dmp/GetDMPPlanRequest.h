// Generated by gencpp from file dmp/GetDMPPlanRequest.msg
// DO NOT EDIT!


#ifndef DMP_MESSAGE_GETDMPPLANREQUEST_H
#define DMP_MESSAGE_GETDMPPLANREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dmp
{
template <class ContainerAllocator>
struct GetDMPPlanRequest_
{
  typedef GetDMPPlanRequest_<ContainerAllocator> Type;

  GetDMPPlanRequest_()
    : x_0()
    , x_dot_0()
    , t_0(0.0)
    , goal()
    , goal_thresh()
    , seg_length(0.0)
    , tau(0.0)
    , dt(0.0)
    , integrate_iter(0)  {
    }
  GetDMPPlanRequest_(const ContainerAllocator& _alloc)
    : x_0(_alloc)
    , x_dot_0(_alloc)
    , t_0(0.0)
    , goal(_alloc)
    , goal_thresh(_alloc)
    , seg_length(0.0)
    , tau(0.0)
    , dt(0.0)
    , integrate_iter(0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_0_type;
  _x_0_type x_0;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_dot_0_type;
  _x_dot_0_type x_dot_0;

   typedef double _t_0_type;
  _t_0_type t_0;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_type;
  _goal_type goal;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_thresh_type;
  _goal_thresh_type goal_thresh;

   typedef double _seg_length_type;
  _seg_length_type seg_length;

   typedef double _tau_type;
  _tau_type tau;

   typedef double _dt_type;
  _dt_type dt;

   typedef int32_t _integrate_iter_type;
  _integrate_iter_type integrate_iter;





  typedef boost::shared_ptr< ::dmp::GetDMPPlanRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmp::GetDMPPlanRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetDMPPlanRequest_

typedef ::dmp::GetDMPPlanRequest_<std::allocator<void> > GetDMPPlanRequest;

typedef boost::shared_ptr< ::dmp::GetDMPPlanRequest > GetDMPPlanRequestPtr;
typedef boost::shared_ptr< ::dmp::GetDMPPlanRequest const> GetDMPPlanRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmp::GetDMPPlanRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dmp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'dmp': ['/home/bhertel/catkin_ws/src/dmp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmp::GetDMPPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmp::GetDMPPlanRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmp::GetDMPPlanRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bae6b051e2f7b80225be1fd25b5b705a";
  }

  static const char* value(const ::dmp::GetDMPPlanRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbae6b051e2f7b802ULL;
  static const uint64_t static_value2 = 0x25be1fd25b5b705aULL;
};

template<class ContainerAllocator>
struct DataType< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmp/GetDMPPlanRequest";
  }

  static const char* value(const ::dmp::GetDMPPlanRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float64[] x_0\n\
\n\
\n\
float64[] x_dot_0\n\
\n\
\n\
\n\
float64 t_0\n\
\n\
\n\
float64[] goal\n\
\n\
\n\
\n\
\n\
\n\
float64[] goal_thresh\n\
\n\
\n\
float64 seg_length\n\
\n\
\n\
float64 tau\n\
\n\
\n\
float64 dt\n\
\n\
\n\
int32 integrate_iter\n\
\n\
";
  }

  static const char* value(const ::dmp::GetDMPPlanRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_0);
      stream.next(m.x_dot_0);
      stream.next(m.t_0);
      stream.next(m.goal);
      stream.next(m.goal_thresh);
      stream.next(m.seg_length);
      stream.next(m.tau);
      stream.next(m.dt);
      stream.next(m.integrate_iter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDMPPlanRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmp::GetDMPPlanRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmp::GetDMPPlanRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_0[]" << std::endl;
    for (size_t i = 0; i < v.x_0.size(); ++i)
    {
      s << indent << "  x_0[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_0[i]);
    }
    s << indent << "x_dot_0[]" << std::endl;
    for (size_t i = 0; i < v.x_dot_0.size(); ++i)
    {
      s << indent << "  x_dot_0[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_dot_0[i]);
    }
    s << indent << "t_0: ";
    Printer<double>::stream(s, indent + "  ", v.t_0);
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal[i]);
    }
    s << indent << "goal_thresh[]" << std::endl;
    for (size_t i = 0; i < v.goal_thresh.size(); ++i)
    {
      s << indent << "  goal_thresh[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_thresh[i]);
    }
    s << indent << "seg_length: ";
    Printer<double>::stream(s, indent + "  ", v.seg_length);
    s << indent << "tau: ";
    Printer<double>::stream(s, indent + "  ", v.tau);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "integrate_iter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.integrate_iter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMP_MESSAGE_GETDMPPLANREQUEST_H
