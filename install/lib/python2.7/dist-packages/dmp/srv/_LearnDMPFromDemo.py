# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dmp/LearnDMPFromDemoRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dmp.msg

class LearnDMPFromDemoRequest(genpy.Message):
  _md5sum = "d7c68a7f789c246aea188ade43175b30"
  _type = "dmp/LearnDMPFromDemoRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
DMPTraj demo


float64[] k_gains
float64[] d_gains


int32 num_bases


================================================================================
MSG: dmp/DMPTraj
# points and times should be the same length
DMPPoint[] points

# Times of observations, in seconds, starting at zero
float64[] times



================================================================================
MSG: dmp/DMPPoint
# Positions and velocities of DOFs
#Velocity is only used for movement plans, not for giving demonstrations.
float64[] positions
float64[] velocities


"""
  __slots__ = ['demo','k_gains','d_gains','num_bases']
  _slot_types = ['dmp/DMPTraj','float64[]','float64[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       demo,k_gains,d_gains,num_bases

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LearnDMPFromDemoRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.demo is None:
        self.demo = dmp.msg.DMPTraj()
      if self.k_gains is None:
        self.k_gains = []
      if self.d_gains is None:
        self.d_gains = []
      if self.num_bases is None:
        self.num_bases = 0
    else:
      self.demo = dmp.msg.DMPTraj()
      self.k_gains = []
      self.d_gains = []
      self.num_bases = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.demo.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.demo.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
      length = len(self.demo.times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.demo.times))
      length = len(self.k_gains)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.k_gains))
      length = len(self.d_gains)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.d_gains))
      buff.write(_get_struct_i().pack(self.num_bases))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.demo is None:
        self.demo = dmp.msg.DMPTraj()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.demo.points = []
      for i in range(0, length):
        val1 = dmp.msg.DMPPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        self.demo.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.demo.times = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.k_gains = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.d_gains = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.num_bases,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.demo.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.demo.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
      length = len(self.demo.times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.demo.times.tostring())
      length = len(self.k_gains)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.k_gains.tostring())
      length = len(self.d_gains)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.d_gains.tostring())
      buff.write(_get_struct_i().pack(self.num_bases))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.demo is None:
        self.demo = dmp.msg.DMPTraj()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.demo.points = []
      for i in range(0, length):
        val1 = dmp.msg.DMPPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.demo.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.demo.times = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.k_gains = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.d_gains = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.num_bases,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dmp/LearnDMPFromDemoResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dmp.msg

class LearnDMPFromDemoResponse(genpy.Message):
  _md5sum = "d2dccae00aae58574694dfa33e62fac1"
  _type = "dmp/LearnDMPFromDemoResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

DMPData[] dmp_list


float64 tau


================================================================================
MSG: dmp/DMPData
float64 k_gain
float64 d_gain
float64[] weights
float64[] f_domain
float64[] f_targets

"""
  __slots__ = ['dmp_list','tau']
  _slot_types = ['dmp/DMPData[]','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       dmp_list,tau

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LearnDMPFromDemoResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.dmp_list is None:
        self.dmp_list = []
      if self.tau is None:
        self.tau = 0.
    else:
      self.dmp_list = []
      self.tau = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.dmp_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.dmp_list:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.k_gain, _x.d_gain))
        length = len(val1.weights)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.weights))
        length = len(val1.f_domain)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.f_domain))
        length = len(val1.f_targets)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.f_targets))
      buff.write(_get_struct_d().pack(self.tau))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.dmp_list is None:
        self.dmp_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dmp_list = []
      for i in range(0, length):
        val1 = dmp.msg.DMPData()
        _x = val1
        start = end
        end += 16
        (_x.k_gain, _x.d_gain,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.weights = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.f_domain = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.f_targets = struct.unpack(pattern, str[start:end])
        self.dmp_list.append(val1)
      start = end
      end += 8
      (self.tau,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.dmp_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.dmp_list:
        _x = val1
        buff.write(_get_struct_2d().pack(_x.k_gain, _x.d_gain))
        length = len(val1.weights)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.weights.tostring())
        length = len(val1.f_domain)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.f_domain.tostring())
        length = len(val1.f_targets)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.f_targets.tostring())
      buff.write(_get_struct_d().pack(self.tau))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.dmp_list is None:
        self.dmp_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.dmp_list = []
      for i in range(0, length):
        val1 = dmp.msg.DMPData()
        _x = val1
        start = end
        end += 16
        (_x.k_gain, _x.d_gain,) = _get_struct_2d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.weights = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.f_domain = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.f_targets = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.dmp_list.append(val1)
      start = end
      end += 8
      (self.tau,) = _get_struct_d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
class LearnDMPFromDemo(object):
  _type          = 'dmp/LearnDMPFromDemo'
  _md5sum = '3ba13cfa47585560a2fd9cc202efdbff'
  _request_class  = LearnDMPFromDemoRequest
  _response_class = LearnDMPFromDemoResponse
